/* tslint:disable */
/* eslint-disable */
/**
 * Game of Thrones Championship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CubeCreate } from '../models';
// @ts-ignore
import { CubeResponse } from '../models';
// @ts-ignore
import { CubeUpdate } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
/**
 * CubesApi - axios parameter creator
 * @export
 */
export const CubesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new cube
         * @summary Create Cube
         * @param {CubeCreate} cubeCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCubeApiV1CubesPost: async (cubeCreate: CubeCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cubeCreate' is not null or undefined
            assertParamExists('createCubeApiV1CubesPost', 'cubeCreate', cubeCreate)
            const localVarPath = `/api/v1/cubes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cubeCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a cube
         * @summary Delete Cube
         * @param {number} cubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCubeApiV1CubesCubeIdDelete: async (cubeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cubeId' is not null or undefined
            assertParamExists('deleteCubeApiV1CubesCubeIdDelete', 'cubeId', cubeId)
            const localVarPath = `/api/v1/cubes/{cube_id}`
                .replace(`{${"cube_id"}}`, encodeURIComponent(String(cubeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific cube by ID
         * @summary Get Cube
         * @param {number} cubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCubeApiV1CubesCubeIdGet: async (cubeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cubeId' is not null or undefined
            assertParamExists('getCubeApiV1CubesCubeIdGet', 'cubeId', cubeId)
            const localVarPath = `/api/v1/cubes/{cube_id}`
                .replace(`{${"cube_id"}}`, encodeURIComponent(String(cubeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all cubes
         * @summary List Cubes
         * @param {number} [roundId]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCubesApiV1CubesGet: async (roundId?: number, skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cubes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roundId !== undefined) {
                localVarQueryParameter['round_id'] = roundId;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a cube
         * @summary Update Cube
         * @param {number} cubeId
         * @param {CubeUpdate} cubeUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCubeApiV1CubesCubeIdPut: async (cubeId: number, cubeUpdate: CubeUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cubeId' is not null or undefined
            assertParamExists('updateCubeApiV1CubesCubeIdPut', 'cubeId', cubeId)
            // verify required parameter 'cubeUpdate' is not null or undefined
            assertParamExists('updateCubeApiV1CubesCubeIdPut', 'cubeUpdate', cubeUpdate)
            const localVarPath = `/api/v1/cubes/{cube_id}`
                .replace(`{${"cube_id"}}`, encodeURIComponent(String(cubeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cubeUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CubesApi - functional programming interface
 * @export
 */
export const CubesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CubesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new cube
         * @summary Create Cube
         * @param {CubeCreate} cubeCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCubeApiV1CubesPost(cubeCreate: CubeCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CubeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCubeApiV1CubesPost(cubeCreate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CubesApi.createCubeApiV1CubesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Delete a cube
         * @summary Delete Cube
         * @param {number} cubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCubeApiV1CubesCubeIdDelete(cubeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCubeApiV1CubesCubeIdDelete(cubeId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CubesApi.deleteCubeApiV1CubesCubeIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a specific cube by ID
         * @summary Get Cube
         * @param {number} cubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCubeApiV1CubesCubeIdGet(cubeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CubeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCubeApiV1CubesCubeIdGet(cubeId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CubesApi.getCubeApiV1CubesCubeIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * List all cubes
         * @summary List Cubes
         * @param {number} [roundId]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCubesApiV1CubesGet(roundId?: number, skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CubeResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCubesApiV1CubesGet(roundId, skip, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CubesApi.listCubesApiV1CubesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Update a cube
         * @summary Update Cube
         * @param {number} cubeId
         * @param {CubeUpdate} cubeUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCubeApiV1CubesCubeIdPut(cubeId: number, cubeUpdate: CubeUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CubeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCubeApiV1CubesCubeIdPut(cubeId, cubeUpdate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CubesApi.updateCubeApiV1CubesCubeIdPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CubesApi - factory interface
 * @export
 */
export const CubesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CubesApiFp(configuration)
    return {
        /**
         * Create a new cube
         * @summary Create Cube
         * @param {CubeCreate} cubeCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCubeApiV1CubesPost(cubeCreate: CubeCreate, options?: any): AxiosPromise<CubeResponse> {
            return localVarFp.createCubeApiV1CubesPost(cubeCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a cube
         * @summary Delete Cube
         * @param {number} cubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCubeApiV1CubesCubeIdDelete(cubeId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteCubeApiV1CubesCubeIdDelete(cubeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific cube by ID
         * @summary Get Cube
         * @param {number} cubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCubeApiV1CubesCubeIdGet(cubeId: number, options?: any): AxiosPromise<CubeResponse> {
            return localVarFp.getCubeApiV1CubesCubeIdGet(cubeId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all cubes
         * @summary List Cubes
         * @param {number} [roundId]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCubesApiV1CubesGet(roundId?: number, skip?: number, limit?: number, options?: any): AxiosPromise<Array<CubeResponse>> {
            return localVarFp.listCubesApiV1CubesGet(roundId, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a cube
         * @summary Update Cube
         * @param {number} cubeId
         * @param {CubeUpdate} cubeUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCubeApiV1CubesCubeIdPut(cubeId: number, cubeUpdate: CubeUpdate, options?: any): AxiosPromise<CubeResponse> {
            return localVarFp.updateCubeApiV1CubesCubeIdPut(cubeId, cubeUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CubesApi - interface
 * @export
 * @interface CubesApi
 */
export interface CubesApiInterface {
    /**
     * Create a new cube
     * @summary Create Cube
     * @param {CubeCreate} cubeCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApiInterface
     */
    createCubeApiV1CubesPost(cubeCreate: CubeCreate, options?: RawAxiosRequestConfig): AxiosPromise<CubeResponse>;

    /**
     * Delete a cube
     * @summary Delete Cube
     * @param {number} cubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApiInterface
     */
    deleteCubeApiV1CubesCubeIdDelete(cubeId: number, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Get a specific cube by ID
     * @summary Get Cube
     * @param {number} cubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApiInterface
     */
    getCubeApiV1CubesCubeIdGet(cubeId: number, options?: RawAxiosRequestConfig): AxiosPromise<CubeResponse>;

    /**
     * List all cubes
     * @summary List Cubes
     * @param {number} [roundId]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApiInterface
     */
    listCubesApiV1CubesGet(roundId?: number, skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CubeResponse>>;

    /**
     * Update a cube
     * @summary Update Cube
     * @param {number} cubeId
     * @param {CubeUpdate} cubeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApiInterface
     */
    updateCubeApiV1CubesCubeIdPut(cubeId: number, cubeUpdate: CubeUpdate, options?: RawAxiosRequestConfig): AxiosPromise<CubeResponse>;

}

/**
 * CubesApi - object-oriented interface
 * @export
 * @class CubesApi
 * @extends {BaseAPI}
 */
export class CubesApi extends BaseAPI implements CubesApiInterface {
    /**
     * Create a new cube
     * @summary Create Cube
     * @param {CubeCreate} cubeCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApi
     */
    public createCubeApiV1CubesPost(cubeCreate: CubeCreate, options?: RawAxiosRequestConfig) {
        return CubesApiFp(this.configuration).createCubeApiV1CubesPost(cubeCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a cube
     * @summary Delete Cube
     * @param {number} cubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApi
     */
    public deleteCubeApiV1CubesCubeIdDelete(cubeId: number, options?: RawAxiosRequestConfig) {
        return CubesApiFp(this.configuration).deleteCubeApiV1CubesCubeIdDelete(cubeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific cube by ID
     * @summary Get Cube
     * @param {number} cubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApi
     */
    public getCubeApiV1CubesCubeIdGet(cubeId: number, options?: RawAxiosRequestConfig) {
        return CubesApiFp(this.configuration).getCubeApiV1CubesCubeIdGet(cubeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all cubes
     * @summary List Cubes
     * @param {number} [roundId]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApi
     */
    public listCubesApiV1CubesGet(roundId?: number, skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return CubesApiFp(this.configuration).listCubesApiV1CubesGet(roundId, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a cube
     * @summary Update Cube
     * @param {number} cubeId
     * @param {CubeUpdate} cubeUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CubesApi
     */
    public updateCubeApiV1CubesCubeIdPut(cubeId: number, cubeUpdate: CubeUpdate, options?: RawAxiosRequestConfig) {
        return CubesApiFp(this.configuration).updateCubeApiV1CubesCubeIdPut(cubeId, cubeUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
