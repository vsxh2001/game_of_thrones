/* tslint:disable */
/* eslint-disable */
/**
 * Game of Thrones Championship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { MatchCreate } from '../models';
// @ts-ignore
import { MatchResponse } from '../models';
// @ts-ignore
import { MatchStatus } from '../models';
// @ts-ignore
import { MatchUpdate } from '../models';
/**
 * MatchesApi - axios parameter creator
 * @export
 */
export const MatchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new match
         * @summary Create Match
         * @param {MatchCreate} matchCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatchApiV1MatchesPost: async (matchCreate: MatchCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchCreate' is not null or undefined
            assertParamExists('createMatchApiV1MatchesPost', 'matchCreate', matchCreate)
            const localVarPath = `/api/v1/matches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matchCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * End a match
         * @summary End Match
         * @param {number} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endMatchApiV1MatchesMatchIdEndPost: async (matchId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('endMatchApiV1MatchesMatchIdEndPost', 'matchId', matchId)
            const localVarPath = `/api/v1/matches/{match_id}/end`
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific match by ID
         * @summary Get Match
         * @param {number} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchApiV1MatchesMatchIdGet: async (matchId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('getMatchApiV1MatchesMatchIdGet', 'matchId', matchId)
            const localVarPath = `/api/v1/matches/{match_id}`
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List matches with optional filters
         * @summary List Matches
         * @param {number} seasonId
         * @param {MatchStatus | null} [status]
         * @param {number | null} [teamId]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMatchesApiV1MatchesGet: async (seasonId: number, status?: MatchStatus | null, teamId?: number | null, skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('listMatchesApiV1MatchesGet', 'seasonId', seasonId)
            const localVarPath = `/api/v1/matches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (seasonId !== undefined) {
                localVarQueryParameter['season_id'] = seasonId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a match
         * @summary Start Match
         * @param {number} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startMatchApiV1MatchesMatchIdStartPost: async (matchId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('startMatchApiV1MatchesMatchIdStartPost', 'matchId', matchId)
            const localVarPath = `/api/v1/matches/{match_id}/start`
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update match details
         * @summary Update Match
         * @param {number} matchId
         * @param {MatchUpdate} matchUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatchApiV1MatchesMatchIdPatch: async (matchId: number, matchUpdate: MatchUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('updateMatchApiV1MatchesMatchIdPatch', 'matchId', matchId)
            // verify required parameter 'matchUpdate' is not null or undefined
            assertParamExists('updateMatchApiV1MatchesMatchIdPatch', 'matchUpdate', matchUpdate)
            const localVarPath = `/api/v1/matches/{match_id}`
                .replace(`{${"match_id"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matchUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchesApi - functional programming interface
 * @export
 */
export const MatchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatchesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new match
         * @summary Create Match
         * @param {MatchCreate} matchCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMatchApiV1MatchesPost(matchCreate: MatchCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMatchApiV1MatchesPost(matchCreate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.createMatchApiV1MatchesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * End a match
         * @summary End Match
         * @param {number} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endMatchApiV1MatchesMatchIdEndPost(matchId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endMatchApiV1MatchesMatchIdEndPost(matchId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.endMatchApiV1MatchesMatchIdEndPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a specific match by ID
         * @summary Get Match
         * @param {number} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatchApiV1MatchesMatchIdGet(matchId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatchApiV1MatchesMatchIdGet(matchId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.getMatchApiV1MatchesMatchIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * List matches with optional filters
         * @summary List Matches
         * @param {number} seasonId
         * @param {MatchStatus | null} [status]
         * @param {number | null} [teamId]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMatchesApiV1MatchesGet(seasonId: number, status?: MatchStatus | null, teamId?: number | null, skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MatchResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMatchesApiV1MatchesGet(seasonId, status, teamId, skip, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.listMatchesApiV1MatchesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Start a match
         * @summary Start Match
         * @param {number} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startMatchApiV1MatchesMatchIdStartPost(matchId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startMatchApiV1MatchesMatchIdStartPost(matchId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.startMatchApiV1MatchesMatchIdStartPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Update match details
         * @summary Update Match
         * @param {number} matchId
         * @param {MatchUpdate} matchUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMatchApiV1MatchesMatchIdPatch(matchId: number, matchUpdate: MatchUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMatchApiV1MatchesMatchIdPatch(matchId, matchUpdate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MatchesApi.updateMatchApiV1MatchesMatchIdPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MatchesApi - factory interface
 * @export
 */
export const MatchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatchesApiFp(configuration)
    return {
        /**
         * Create a new match
         * @summary Create Match
         * @param {MatchCreate} matchCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMatchApiV1MatchesPost(matchCreate: MatchCreate, options?: any): AxiosPromise<MatchResponse> {
            return localVarFp.createMatchApiV1MatchesPost(matchCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * End a match
         * @summary End Match
         * @param {number} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endMatchApiV1MatchesMatchIdEndPost(matchId: number, options?: any): AxiosPromise<MatchResponse> {
            return localVarFp.endMatchApiV1MatchesMatchIdEndPost(matchId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific match by ID
         * @summary Get Match
         * @param {number} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchApiV1MatchesMatchIdGet(matchId: number, options?: any): AxiosPromise<MatchResponse> {
            return localVarFp.getMatchApiV1MatchesMatchIdGet(matchId, options).then((request) => request(axios, basePath));
        },
        /**
         * List matches with optional filters
         * @summary List Matches
         * @param {number} seasonId
         * @param {MatchStatus | null} [status]
         * @param {number | null} [teamId]
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMatchesApiV1MatchesGet(seasonId: number, status?: MatchStatus | null, teamId?: number | null, skip?: number, limit?: number, options?: any): AxiosPromise<Array<MatchResponse>> {
            return localVarFp.listMatchesApiV1MatchesGet(seasonId, status, teamId, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Start a match
         * @summary Start Match
         * @param {number} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startMatchApiV1MatchesMatchIdStartPost(matchId: number, options?: any): AxiosPromise<MatchResponse> {
            return localVarFp.startMatchApiV1MatchesMatchIdStartPost(matchId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update match details
         * @summary Update Match
         * @param {number} matchId
         * @param {MatchUpdate} matchUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatchApiV1MatchesMatchIdPatch(matchId: number, matchUpdate: MatchUpdate, options?: any): AxiosPromise<MatchResponse> {
            return localVarFp.updateMatchApiV1MatchesMatchIdPatch(matchId, matchUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchesApi - interface
 * @export
 * @interface MatchesApi
 */
export interface MatchesApiInterface {
    /**
     * Create a new match
     * @summary Create Match
     * @param {MatchCreate} matchCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    createMatchApiV1MatchesPost(matchCreate: MatchCreate, options?: RawAxiosRequestConfig): AxiosPromise<MatchResponse>;

    /**
     * End a match
     * @summary End Match
     * @param {number} matchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    endMatchApiV1MatchesMatchIdEndPost(matchId: number, options?: RawAxiosRequestConfig): AxiosPromise<MatchResponse>;

    /**
     * Get a specific match by ID
     * @summary Get Match
     * @param {number} matchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    getMatchApiV1MatchesMatchIdGet(matchId: number, options?: RawAxiosRequestConfig): AxiosPromise<MatchResponse>;

    /**
     * List matches with optional filters
     * @summary List Matches
     * @param {number} seasonId
     * @param {MatchStatus | null} [status]
     * @param {number | null} [teamId]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    listMatchesApiV1MatchesGet(seasonId: number, status?: MatchStatus | null, teamId?: number | null, skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<MatchResponse>>;

    /**
     * Start a match
     * @summary Start Match
     * @param {number} matchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    startMatchApiV1MatchesMatchIdStartPost(matchId: number, options?: RawAxiosRequestConfig): AxiosPromise<MatchResponse>;

    /**
     * Update match details
     * @summary Update Match
     * @param {number} matchId
     * @param {MatchUpdate} matchUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApiInterface
     */
    updateMatchApiV1MatchesMatchIdPatch(matchId: number, matchUpdate: MatchUpdate, options?: RawAxiosRequestConfig): AxiosPromise<MatchResponse>;

}

/**
 * MatchesApi - object-oriented interface
 * @export
 * @class MatchesApi
 * @extends {BaseAPI}
 */
export class MatchesApi extends BaseAPI implements MatchesApiInterface {
    /**
     * Create a new match
     * @summary Create Match
     * @param {MatchCreate} matchCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public createMatchApiV1MatchesPost(matchCreate: MatchCreate, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).createMatchApiV1MatchesPost(matchCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * End a match
     * @summary End Match
     * @param {number} matchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public endMatchApiV1MatchesMatchIdEndPost(matchId: number, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).endMatchApiV1MatchesMatchIdEndPost(matchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific match by ID
     * @summary Get Match
     * @param {number} matchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public getMatchApiV1MatchesMatchIdGet(matchId: number, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).getMatchApiV1MatchesMatchIdGet(matchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List matches with optional filters
     * @summary List Matches
     * @param {number} seasonId
     * @param {MatchStatus | null} [status]
     * @param {number | null} [teamId]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public listMatchesApiV1MatchesGet(seasonId: number, status?: MatchStatus | null, teamId?: number | null, skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).listMatchesApiV1MatchesGet(seasonId, status, teamId, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start a match
     * @summary Start Match
     * @param {number} matchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public startMatchApiV1MatchesMatchIdStartPost(matchId: number, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).startMatchApiV1MatchesMatchIdStartPost(matchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update match details
     * @summary Update Match
     * @param {number} matchId
     * @param {MatchUpdate} matchUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    public updateMatchApiV1MatchesMatchIdPatch(matchId: number, matchUpdate: MatchUpdate, options?: RawAxiosRequestConfig) {
        return MatchesApiFp(this.configuration).updateMatchApiV1MatchesMatchIdPatch(matchId, matchUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
