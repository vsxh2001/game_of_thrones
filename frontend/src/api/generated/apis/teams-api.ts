/* tslint:disable */
/* eslint-disable */
/**
 * Game of Thrones Championship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { TeamCreate } from '../models';
// @ts-ignore
import { TeamResponse } from '../models';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new team
         * @summary Create Team
         * @param {TeamCreate} teamCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamApiV1TeamsPost: async (teamCreate: TeamCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamCreate' is not null or undefined
            assertParamExists('createTeamApiV1TeamsPost', 'teamCreate', teamCreate)
            const localVarPath = `/api/v1/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific team by ID
         * @summary Get Team
         * @param {number} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamApiV1TeamsTeamIdGet: async (teamId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamApiV1TeamsTeamIdGet', 'teamId', teamId)
            const localVarPath = `/api/v1/teams/{team_id}`
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all teams in a season
         * @summary List Teams
         * @param {number} seasonId
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamsApiV1TeamsGet: async (seasonId: number, skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('listTeamsApiV1TeamsGet', 'seasonId', seasonId)
            const localVarPath = `/api/v1/teams/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (seasonId !== undefined) {
                localVarQueryParameter['season_id'] = seasonId;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new team
         * @summary Create Team
         * @param {TeamCreate} teamCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamApiV1TeamsPost(teamCreate: TeamCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamApiV1TeamsPost(teamCreate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.createTeamApiV1TeamsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a specific team by ID
         * @summary Get Team
         * @param {number} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamApiV1TeamsTeamIdGet(teamId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamApiV1TeamsTeamIdGet(teamId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.getTeamApiV1TeamsTeamIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * List all teams in a season
         * @summary List Teams
         * @param {number} seasonId
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTeamsApiV1TeamsGet(seasonId: number, skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamsApiV1TeamsGet(seasonId, skip, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TeamsApi.listTeamsApiV1TeamsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * Create a new team
         * @summary Create Team
         * @param {TeamCreate} teamCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamApiV1TeamsPost(teamCreate: TeamCreate, options?: any): AxiosPromise<TeamResponse> {
            return localVarFp.createTeamApiV1TeamsPost(teamCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific team by ID
         * @summary Get Team
         * @param {number} teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamApiV1TeamsTeamIdGet(teamId: number, options?: any): AxiosPromise<TeamResponse> {
            return localVarFp.getTeamApiV1TeamsTeamIdGet(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all teams in a season
         * @summary List Teams
         * @param {number} seasonId
         * @param {number} [skip]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeamsApiV1TeamsGet(seasonId: number, skip?: number, limit?: number, options?: any): AxiosPromise<Array<TeamResponse>> {
            return localVarFp.listTeamsApiV1TeamsGet(seasonId, skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - interface
 * @export
 * @interface TeamsApi
 */
export interface TeamsApiInterface {
    /**
     * Create a new team
     * @summary Create Team
     * @param {TeamCreate} teamCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    createTeamApiV1TeamsPost(teamCreate: TeamCreate, options?: RawAxiosRequestConfig): AxiosPromise<TeamResponse>;

    /**
     * Get a specific team by ID
     * @summary Get Team
     * @param {number} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeamApiV1TeamsTeamIdGet(teamId: number, options?: RawAxiosRequestConfig): AxiosPromise<TeamResponse>;

    /**
     * List all teams in a season
     * @summary List Teams
     * @param {number} seasonId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    listTeamsApiV1TeamsGet(seasonId: number, skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<TeamResponse>>;

}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI implements TeamsApiInterface {
    /**
     * Create a new team
     * @summary Create Team
     * @param {TeamCreate} teamCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createTeamApiV1TeamsPost(teamCreate: TeamCreate, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createTeamApiV1TeamsPost(teamCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific team by ID
     * @summary Get Team
     * @param {number} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamApiV1TeamsTeamIdGet(teamId: number, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamApiV1TeamsTeamIdGet(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all teams in a season
     * @summary List Teams
     * @param {number} seasonId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listTeamsApiV1TeamsGet(seasonId: number, skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listTeamsApiV1TeamsGet(seasonId, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
